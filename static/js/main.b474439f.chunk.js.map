{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","Math","floor","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mQAiBeA,EAdA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,sBAAKC,UAAYC,IAAMC,OAAvB,UACI,6BAAMN,IACN,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,2CAAcC,KAAKC,MAAMV,MACzB,qBAAKG,UAAWC,IAAMH,MAAOU,IAAKV,EAAOW,IAAI,SCqC1CC,EA7CH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMSJ,mBAAS,WANlB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,YACQ,uCAAI,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCJ,EAApC,mBATjB,WASiB,oBARjB,qCAOO,cACZK,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJC,2CAAJ,qDAOhBG,KACC,CAACX,IAYJ,OACE,sBAAKhB,UAAU,MAAf,UACE,uBAAM4B,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBf,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa+B,KAAK,OAAOC,MAAOlB,EAAQmB,SAZ1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAYf,wBAAQhC,UAAU,gBAAgB+B,KAAK,SAAvC,uBAEF,qBAAK/B,UAAU,UAAf,SACCY,EAAQT,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAAkCN,MAAQM,EAAOA,OAAOiC,MAAOtC,SAAWK,EAAOA,OAAOL,SAAUC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,aAA5IG,EAAOA,OAAOiC,gBC9BpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.b474439f.chunk.js","sourcesContent":["import React from 'react';\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n    return(\n        <div className ={style.recipe}>\n            <h1 >{title}</h1>\n            <ol>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            <p>Calories: {Math.floor(calories)}</p>\n            <img className={style.image} src={image} alt=\"\"/>\n        </div>\n    );\n}\nexport default Recipe;","import React,{useEffect, useState} from \"react\";\nimport './App.css';\n//import components\nimport Recipe from \"./Recipe\";\n\nconst App = () => {\n  const APP_ID = 'fd12936f';\n  const APP_KEY ='97d84a7c08eec524c4601e459affb717';\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] =useState('chicken');\n\n  useEffect(()=>{\n    const getRecipes =  async() => {\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);   \n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits);\n    };\n\n    getRecipes();\n  }, [query]);\n\n \n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe =>(\n        <Recipe key={recipe.recipe.label} title ={recipe.recipe.label} calories ={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n        \n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}